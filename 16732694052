local connections = {}
local player = game:GetService("Players").LocalPlayer
local StatsService = game:GetService('Stats')
local VirtualInputManager = game:GetService('VirtualInputManager')
local startergui = game:GetService("StarterGui")
local GuiService = game:GetService("GuiService")
local ping = StatsService.Network.ServerStatsItem['Data Ping']
local mod = require(game:GetService("ReplicatedStorage").modules.library.fish)
local best = game:GetService("ReplicatedStorage").playerstats[game.Players.LocalPlayer.Name].Bestiary
local zonesMod = require(game:GetService("ReplicatedStorage").modules.library.fish.zones)
local fishing = workspace.zones.fishing
local pos
local guis = player.PlayerGui
local rod = guis.hud.safezone.backpack.hotbar["1"].tool
local zones = {"None"}
local eventZones = {}
local tpSpot = {}
local npcs = {}
local npcsToLoad = {
    [workspace.world.spawns.TpSpots.sunstone] = {
        "Merlin";
    };
    [workspace.world.spawns.TpSpots.moosewood] = {
        "Moosewood Angler";
        "Appraiser";
    };
}
startergui:SetCore("SendNotification",{
    Title = "Loading All Npcs";
    Text = "this might take soome times";
    Duration = 3
})

for i, v in npcsToLoad do
	for a, b in v do
		task.spawn(function()
			npcs[b] = workspace.world.npcs:WaitForChild(b)
		end)
	end
	game.Players.LocalPlayer:RequestStreamAroundAsync(i.Position)
end

for i, v in require(game:GetService("ReplicatedStorage").modules.library.fish.zones) do
	if v.Priority >= 100 then
        table.insert(eventZones, i)
    else 
        if fishing:FindFirstChild(i) then
            table.insert(zones, i)
        end
	end
end
for i, v in workspace.world.spawns.TpSpots:GetChildren() do
    table.insert(tpSpot, v.Name)
end

local function GetZoneForFish(name)	
	local imppossible = true
	for a, b in zonesMod do
	    if table.find(b.Pool, name) then
	        return a
	    end
	end
	if imppossible then warn("skipped caus impossible"); end
    return
end


local repo = 'https://raw.githubusercontent.com/cloudman4416/LinoriaMod/refs/heads/main/'

local Library = loadstring(game:HttpGet(repo .. "Library.lua"))() --"https://raw.githubusercontent.com/KINGHUB01/Gui/refs/heads/main/Gui%20Lib%20%5BLibrary%5D"))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = "Hidaki Hub | fxyhidaki",
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    ["Main"] = Window:AddTab('Main'),
    ["Auto Things"] = Window:AddTab('Auto Auto Things'),
    ["Teleport"] = Window:AddTab('Teleport'),
    ["UI Settings"] = Window:AddTab('UI Settings'),
}

local Groupbox = {
    ["Main_Left_1"] = Tabs["Main"]:AddLeftGroupbox("Main"),
    ["Main_Left_2"] = Tabs["Main"]:AddLeftGroupbox("Placement"),
    ["Auto Things_Left_1"] = Tabs["Auto Things"]:AddLeftGroupbox("Auto Bestiary"),
    ["Auto Things_Right_1"] = Tabs["Auto Things"]:AddRightGroupbox("Auto Angler"),
    ["Teleport_Left_1"] = Tabs["Teleport"]:AddLeftGroupbox("Teleports"),
    ["UI Settings_Left_1"] = Tabs['UI Settings']:AddLeftGroupbox('Menu')
}

Groupbox["UI Settings_Left_1"]:AddButton('Unload', function() Library:Unload() end)

local autoEquip_t = Groupbox["Main_Left_1"]:AddToggle("AutoEquip", {
    Text = "Auto Equip",
    Default = false,
    Tooltip = nil
})

local autoCast_t = Groupbox["Main_Left_1"]:AddToggle("Auto Cast", {
    Text = "Auto Cast",
    Default = false,
    Tooltip = nil
})

local autoShake_t = Groupbox["Main_Left_1"]:AddToggle('Auto Shake', {
    Text = 'Auto Shake',
    Default = false,
    Tooltip = nil
})

local autoReel_t = Groupbox["Main_Left_1"]:AddToggle("Auto Reel", {
    Text = "Auto Reel",
    Default = false,
    Tooltip = nil
})

local zoneCast_t = Groupbox["Main_Left_1"]:AddToggle("Zone Cast", {
    Text = "Zone Cast",
    Default = false,
    Tooltip = nil
})

local zoneCast_d = Groupbox["Main_Left_1"]:AddDropdown('Zone Cast Selector', {
    Text = 'Zone Cast Location',
    Tooltip = nil,
    Values = zones,
    Default = "None",
})

local eventZoneCast_d = Groupbox["Main_Left_1"]:AddDropdown('Zone Cast Selector (Event)', {
    Text = 'Zone Cast Location For Event',
    Tooltip = nil,
    Values = eventZones,
    Default = 0,
    Multi = true
})

Groupbox["Main_Left_2"]:AddButton({
    Text = "Set Position",
    Func = function()
        pos = player.Character.HumanoidRootPart.CFrame
    end,
    DoubleClick = false,
    Tooltip = nil
})

local loopTp_t = Groupbox["Main_Left_2"]:AddToggle("Loop Tp", {
    Text = "Loop Tp",
    Default = false,
    Tooltip = nil
})

local autoBestiary_t = Groupbox["Auto Things_Left_1"]:AddToggle("Auto Bestiary", {
    Text = "Auto Complete Bestiary",
    Default = false,
    Tooltip = "Use with Reinforced Rod pls"
})

local autoBestiary_d = Groupbox["Auto Things_Left_1"]:AddDropdown("Rarity Selector", {
    Text = "Rarity Selector",
    Default = 0,
    Values = mod.Rarities,
    Tooltip = nil,
    Multi = true
})

local autoAngler_t = Groupbox["Auto Things_Right_1"]:AddToggle("Auto Angler", {
    Text = "Auto Complete Angler Quest",
    Default = false,
    Tooltip = nil
})

Groupbox["Teleport_Left_1"]:AddDropdown('Zone Teleport', {
    Text = 'Teleport to a location',
    Tooltip = nil,
    Values = tpSpot,
    Default = 0,

    Callback = function(Value)
        player:RequestStreamAroundAsync(workspace.world.spawns.TpSpots[Value].Position)
        player.Character.HumanoidRootPart.CFrame = workspace.world.spawns.TpSpots[Value].CFrame + Vector3.new(0, 1, 0)
    end
})

-- SETTING TOGGLES CALLBACK
autoEquip_t:OnChanged(function(value)
    if value then
        task.spawn(function()
            while autoEquip_t.Value and task.wait() do
                if rod.Value.Parent ~= player.Character then
                    guis.hud.safezone.backpack.events.equip:FireServer(rod.Value)
                    task.wait((math.floor(ping:GetValue()))/1000)
                end
            end
        end)
    end
end)

autoCast_t:OnChanged(function(value)
    if value then
        task.spawn(function()
            while autoCast_t.Value and task.wait() do
                if rod.Value.values.casted.Value then
                    if rod.Value.values.bobberzone.Value == "nil" then
                        rod.Value.events.reset:FireServer()
                    end
                else
                    rod.Value.events.cast:FireServer(100)
                    task.wait(2)
                end
            end
        end)
    end
end)

autoShake_t:OnChanged(function(value)
    if value then
        connections["shakeui"] = guis.ChildAdded:Connect(function(shakeui)
            if shakeui.Name == "shakeui" then
                connections["shakebutton"] = shakeui:WaitForChild("safezone").ChildAdded:Connect(function(button)
                    if button.Name == "button" then
                        button.Selectable = true
                        GuiService.SelectedObject = button
                        VirtualInputManager:SendKeyEvent(true, 13, false, nil)
                        VirtualInputManager:SendKeyEvent(false, 13, false, nil)
                    end
                end)
                shakeui.Destroying:Wait()
                connections["shakebutton"]:Disconnect()
                GuiService.SelectedObject = nil
            end
        end)
        pcall(function()
            firesignal(guis.ChildAdded, guis.shakeui)
            firesignal(guis.shakeui.safezone.ChildAdded, guis.shakeui.safezone.button)
        end)
    else
        pcall(function()
            connections["shakeui"]:Disconnect()
            connections["shakebutton"]:Disconnect()
        end)
    end
end)
--a

autoReel_t:OnChanged(function(value)
    if value then
        task.spawn(function()
            while autoReel_t.Value and task.wait() do
                game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("reelfinished"):FireServer(100, true)
            end
        end)
    end
end)

local function Lambda()
    for i, v in eventZoneCast_d.Value do 
        if fishing:FindFirstChild(i) then
            return i
        end
    end
    return ""
end

zoneCast_t:OnChanged(function(Value)
    if Value then
        connections["zonecast"] = rod.Value.ChildAdded:Connect(function(bobber)
            if bobber.Name == "bobber" then
                bobber:WaitForChild("RopeConstraint").Length = math.huge
                Instance.new("BodyVelocity", bobber).Velocity = Vector3.new(0, 0, 0)
                bobber.CFrame = ((fishing:FindFirstChild(Lambda()) and fishing:FindFirstChild(Lambda()).CFrame) or fishing:FindFirstChild(zoneCast_d.Value).CFrame)
            end
        end)
    else
        pcall(function()
            connections["zonecast"]:Disconnect()
        end)
    end
end)

autoBestiary_t:OnChanged(function(Value)
    if Value then
        autoAngler_t:SetValue(false)
        zoneCast_t:SetValue(true)
        task.spawn(function()
            for i, v in mod do
                if autoBestiary_t.Value == false then
                    break
                end
                if typeof(v) == "table" and v.Rarity and not autoBestiary_d.Value[v.Rarity] then
                    continue
                end
                if best:FindFirstChild(i) then
                    continue
                end
                print(`Need Fish : {i}`)
                local zone = GetZoneForFish(i)
                if zone then
                    zoneCast_d:SetValue(zone)
                else 
                    warn("skipped caus impossible"); 
                    continue 
                end
                repeat task.wait(1) until best:FindFirstChild(i) or autoBestiary_t.Value == false
            end
        end)
    end
end)

autoAngler_t:OnChanged(function(Value)
    if Value then
        autoBestiary_t:SetValue(false)
        zoneCast_t:SetValue(true)
        task.spawn(function()
            connections["autoangler"] = game:GetService("ReplicatedStorage").playerstats[player.Name].Quests.ChildAdded:Connect(function(child)
                task.wait(2)
                print("new quest detected")
                if string.split(child.Name, "_")[1] == "Angler Quest" then
                    for k, j in child:GetChildren() do
                        if child:FindFirstChild(`{j.Name}_Goal`) then
                            local zone = GetZoneForFish(j.Name)
                            if zone then
                                zoneCast_d:SetValue(zone)
                            else
                                warn("fish impossible to get")
                                return
                            end
                            local state = autoEquip_t.Value
                            --autoEquip_t:SetValue(false)
                            guis.hud.safezone.backpack.events.equip:FireServer(player.Backpack:WaitForChild(j.Name))
                            task.wait(1)
                            npcs["Moosewood Angler"].angler.questCompleted:InvokeServer()
                            autoEquip_t:SetValue(state)
                            task.wait(2)
                            npcs["Moosewood Angler"].angler.giveQuest:InvokeServer()
                            print("getting another quest")
                            break
                        end
                    end
                end
            end)
            for i, v in game:GetService("ReplicatedStorage").playerstats[player.Name].Quests:GetChildren() do
                firesignal(game:GetService("ReplicatedStorage").playerstats[player.Name].Quests.ChildAdded, v)
            end
            if #game:GetService("ReplicatedStorage").playerstats[player.Name].Quests:GetChildren() == 0 then
                task.wait(2)
                npcs["Moosewood Angler"].angler.giveQuest:InvokeServer()
                print("getting another quest")
            end
        end)
    else
        pcall(function()
            connections["autoangler"]:Disconnect()
        end)
    end
end)

loopTp_t:OnChanged(function(value)
    if value then
        task.spawn(function()
            while loopTp_t.Value do
                player.Character.HumanoidRootPart.CFrame = pos
                task.wait()
            end
        end)
    end
end)

connections["antilag"] = player.Character.HumanoidRootPart.ChildAdded:Connect(function(child)
    if child.Name == "powerfeedback" then
        task.wait()
        child:Destroy()
    end
end)

local function EventWbhook()
    local event = game:GetService("ReplicatedStorage"):WaitForChild("world").event.Value
    local weather = game:GetService("ReplicatedStorage").world.weather.Value
    if event ~= "None" then
        local msg = {
            ["embeds"] = {
                {
                    ["title"] = "Found Server With Event",
                    ["color"] = 4091306,
                    ["fields"] = {
                        {
                            ["name"] = "Current Event",
                            ["value"] = event,
                            ["inline"] = true,
                        },
                        {
                            ["name"] = "Current Weather",
                            ["value"] = weather,
                            ["inline"] = true,
                        },
                        {
                            ["name"] = "Join Script",
                            ["value"] = '```game:GetService("TeleportService"):TeleportToPlaceInstance('.. game.PlaceId .. ', "' .. game.JobId .. '", game:GetService("Players").LocalPlayer)```',
                            ["inline"] = false,
                        }
                    },
                    ["timestamp"] = DateTime.now():ToIsoDate(),
                },
            },
            ["username"] = "Step Mom",
            ["avatar_url"] = "https://cdn.discordapp.com/avatars/1300809146903429120/152ae0be266098e7a09ce8548796fc63.png",
        }
        request({
            Url = (getgenv().WebHookUrl or "https://discord.com/api/webhooks/nuhuh"),
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json",
            },
            Body = game:GetService("HttpService"):JSONEncode(msg),
        })
    end
end

EventWbhook()
game:GetService("ReplicatedStorage").world.event:GetPropertyChangedSignal("Value"):Connect(EventWbhook)

--[[for i, v in game.Players.LocalPlayer.Backpack:GetChildren() do
	if v.Name == "Treasure Map" then
	game:GetService("Players").LocalPlayer.PlayerGui.hud.safezone.backpack.events.equip:FireServer(v)
	workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Jack Marrow"):WaitForChild("treasure"):WaitForChild("repairmap"):InvokeServer()
	end
end]]

--[[for i, v in game.Players.LocalPlayer.Backpack:GetChildren() do
	if v.Name == "Treasure Map" then
		local map = v.link.Value
		local args = {
		    [1] = {
		        ["y"] = map.x.Value,
		        ["x"] = map.y.Value,
		        ["z"] = map.z.Value
		    }
		}

		game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("open_treasure"):FireServer(unpack(args))

		game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position = Vector3.new(map.x.Value, map.y.Value, map.z.Value)
		break
	end
end]]
--[[
task.wait(5)

for i, v in workspace.world.chests:GetChildren() do
	fireproximityprompt(v.ProximityPrompt, 0)
	task.wait(1)
end]]
